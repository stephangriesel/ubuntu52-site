---
export interface Props {
  post: any;
}

const { post } = Astro.props;
---

<div
  class="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 m-2 text-center animation"
>
  <a href={post.url}>
    <img
      class="rounded-t-lg w-full h-64"
      src={post.frontmatter.thumbnail}
      alt=""
    />
  </a>
  <div class="p-5">
    <a href={post.url}>
      <h5
        class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white"
      >
        {post.frontmatter.title}
      </h5>
    </a>
    <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">
      {post.frontmatter.description}
    </p>
    <a
      href={post.url}
      class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-slate-700 rounded-lg hover:bg-slate-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
    >
      View Project
      <svg
        class="w-3.5 h-3.5 ml-2"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 14 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M1 5h12m0 0L9 1m4 4L9 9"></path>
      </svg>
    </a>
  </div>
</div>

<style>
  .animation {
    opacity: 0;
    transition: all 0.7s ease-out;
    transition-delay: 0.4s;
  }

  .scroll-animation {
    opacity: 1;
    transform: translateX(0);
  }
</style>
<script>
  const the_animation = document.querySelectorAll('.animation');

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('scroll-animation');
        } else {
          entry.target.classList.remove('scroll-animation');
        }
      });
    },
    { threshold: 0.1 }
  );
  //
  for (let i = 0; i < the_animation.length; i++) {
    const elements = the_animation[i];

    observer.observe(elements);
  }
</script>
